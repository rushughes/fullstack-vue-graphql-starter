type User {
  _id: ID
  username: String!
  email: String!
  password: String!
  avatar: String
  joinDate: String
  favourites:[Post]
}

type Post {
  _id: ID
  title: String!
  imageUrl: String!
  categories: [String]
  description: String!
  createdDate: String
  likes: Int
  createdBy: User!
  messages: [Message]
}

type Message {
  _id: ID
  messageBody: String!
  messageDate: String
  messageUser: User!
}

type Token {
  token: String!
}

type PostsPage {
  posts: [Post]
  hasMore: Boolean
}

# likes are for posts
# favourites are for users
type LikesFaves {
  likes: Int
  favourites: [Post]
}

type Query {
 getCurrentUser: User
 getUser: User
 getPosts: [Post]
 getUserPosts(userId: ID!): [Post]
 getPost(postId: ID!): Post!
 infiniteScrollPosts(pageNum: Int!, pageSize: Int!): PostsPage
 searchPosts(searchTerm: String): [Post]
}

type Mutation {
  addPost(title: String!, imageUrl:String!, categories: [String]!, description: String!, creatorId: ID!): Post!
  addPostMessage(messageBody: String!, userId: ID!, postId: ID!): Message!
  deleteUserPost(postId: ID!): Post!
  likePost(postId: ID!, username: String!): LikesFaves!
  signinUser(username: String!, password: String!): Token
  signupUser(username: String!, email: String!, password: String!): Token
  unlikePost(postId: ID!, username: String!): LikesFaves!
  updateUserPost(postId: ID!, userId: ID!, title: String!, imageUrl:String!, categories: [String]!, description: String!): Post!
}
